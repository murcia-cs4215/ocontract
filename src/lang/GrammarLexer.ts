// Generated from ./src/lang/Grammar.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import * as Utils from 'antlr4ts/misc/Utils';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

export class GrammarLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly POW = 3;
  public static readonly MUL = 4;
  public static readonly DIV = 5;
  public static readonly ADD = 6;
  public static readonly SUB = 7;
  public static readonly MOD = 8;
  public static readonly ADDFLOAT = 9;
  public static readonly SUBFLOAT = 10;
  public static readonly MULFLOAT = 11;
  public static readonly DIVFLOAT = 12;
  public static readonly LESSTHAN = 13;
  public static readonly LESSTHANOREQUAL = 14;
  public static readonly GREATERTHAN = 15;
  public static readonly GREATERTHANOREQUAL = 16;
  public static readonly EQUALSTRUC = 17;
  public static readonly NOTEQUALSTRUC = 18;
  public static readonly EQUALPHYS = 19;
  public static readonly NOTEQUALPHYS = 20;
  public static readonly CONCAT = 21;
  public static readonly AND = 22;
  public static readonly OR = 23;
  public static readonly NOT = 24;
  public static readonly NUMBER = 25;
  public static readonly TOSKIP = 26;
  public static readonly CHAR = 27;
  public static readonly STRING = 28;
  public static readonly FLOAT = 29;
  public static readonly BOOLEAN = 30;
  public static readonly IF = 31;
  public static readonly THEN = 32;
  public static readonly ELSE = 33;
  public static readonly SEMICOLON = 34;
  public static readonly DOUBLESEMICOLON = 35;
  public static readonly IDENTIFIER = 36;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = [
    'DEFAULT_TOKEN_CHANNEL',
    'HIDDEN',
  ];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'POW',
    'MUL',
    'DIV',
    'ADD',
    'SUB',
    'MOD',
    'ADDFLOAT',
    'SUBFLOAT',
    'MULFLOAT',
    'DIVFLOAT',
    'LESSTHAN',
    'LESSTHANOREQUAL',
    'GREATERTHAN',
    'GREATERTHANOREQUAL',
    'EQUALSTRUC',
    'NOTEQUALSTRUC',
    'EQUALPHYS',
    'NOTEQUALPHYS',
    'CONCAT',
    'AND',
    'OR',
    'NOT',
    'NUMBER',
    'TOSKIP',
    'CHAR',
    'STRING',
    'FLOAT',
    'BOOLEAN',
    'IF',
    'THEN',
    'ELSE',
    'SEMICOLON',
    'DOUBLESEMICOLON',
    'IDENTIFIER',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'('",
    "')'",
    "'**'",
    "'*'",
    "'/'",
    "'+'",
    "'-'",
    "'mod'",
    "'+.'",
    "'-.'",
    "'*.'",
    "'/.'",
    "'<'",
    "'<='",
    "'>'",
    "'>='",
    "'='",
    "'<>'",
    "'=='",
    "'!='",
    "'^'",
    "'&&'",
    "'||'",
    "'not'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'if'",
    "'then'",
    "'else'",
    "';'",
    "';;'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    'POW',
    'MUL',
    'DIV',
    'ADD',
    'SUB',
    'MOD',
    'ADDFLOAT',
    'SUBFLOAT',
    'MULFLOAT',
    'DIVFLOAT',
    'LESSTHAN',
    'LESSTHANOREQUAL',
    'GREATERTHAN',
    'GREATERTHANOREQUAL',
    'EQUALSTRUC',
    'NOTEQUALSTRUC',
    'EQUALPHYS',
    'NOTEQUALPHYS',
    'CONCAT',
    'AND',
    'OR',
    'NOT',
    'NUMBER',
    'TOSKIP',
    'CHAR',
    'STRING',
    'FLOAT',
    'BOOLEAN',
    'IF',
    'THEN',
    'ELSE',
    'SEMICOLON',
    'DOUBLESEMICOLON',
    'IDENTIFIER',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    GrammarLexer._LITERAL_NAMES,
    GrammarLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return GrammarLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(GrammarLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'Grammar.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return GrammarLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return GrammarLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return GrammarLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return GrammarLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02&\xD4\b\x01\x04' +
    '\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04' +
    '\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r' +
    '\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12' +
    '\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17' +
    '\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C' +
    '\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04' +
    '#\t#\x04$\t$\x04%\t%\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03' +
    '\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t' +
    '\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03' +
    '\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03' +
    '\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03' +
    '\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03' +
    '\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03' +
    '\x1A\x06\x1A\x8D\n\x1A\r\x1A\x0E\x1A\x8E\x03\x1B\x06\x1B\x92\n\x1B\r\x1B' +
    '\x0E\x1B\x93\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03' +
    '\x1D\x07\x1D\x9E\n\x1D\f\x1D\x0E\x1D\xA1\v\x1D\x03\x1D\x03\x1D\x03\x1E' +
    '\x06\x1E\xA6\n\x1E\r\x1E\x0E\x1E\xA7\x03\x1E\x03\x1E\x07\x1E\xAC\n\x1E' +
    '\f\x1E\x0E\x1E\xAF\v\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F' +
    '\x03\x1F\x03\x1F\x03\x1F\x05\x1F\xBA\n\x1F\x03 \x03 \x03 \x03!\x03!\x03' +
    '!\x03!\x03!\x03"\x03"\x03"\x03"\x03"\x03#\x03#\x03$\x03$\x03$\x03' +
    '%\x03%\x07%\xD0\n%\f%\x0E%\xD3\v%\x02\x02\x02&\x03\x02\x03\x05\x02\x04' +
    '\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v' +
    '\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!' +
    "\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19" +
    '1\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02' +
    '"C\x02#E\x02$G\x02%I\x02&\x03\x02\b\x03\x022;\x05\x02\v\f\x0F\x0F""' +
    '\x04\x02++__\x05\x02\f\f\x0F\x0F$$\x04\x02aac|\x06\x022;C\\aac|\x02\xDA' +
    '\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02' +
    '\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02' +
    '\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02' +
    '\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02' +
    '\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02' +
    "!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03" +
    '\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02' +
    '\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02' +
    '5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02' +
    '\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02' +
    '\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03' +
    '\x02\x02\x02\x03K\x03\x02\x02\x02\x05M\x03\x02\x02\x02\x07O\x03\x02\x02' +
    '\x02\tR\x03\x02\x02\x02\vT\x03\x02\x02\x02\rV\x03\x02\x02\x02\x0FX\x03' +
    '\x02\x02\x02\x11Z\x03\x02\x02\x02\x13^\x03\x02\x02\x02\x15a\x03\x02\x02' +
    '\x02\x17d\x03\x02\x02\x02\x19g\x03\x02\x02\x02\x1Bj\x03\x02\x02\x02\x1D' +
    'l\x03\x02\x02\x02\x1Fo\x03\x02\x02\x02!q\x03\x02\x02\x02#t\x03\x02\x02' +
    "\x02%v\x03\x02\x02\x02'y\x03\x02\x02\x02)|\x03\x02\x02\x02+\x7F\x03\x02" +
    '\x02\x02-\x81\x03\x02\x02\x02/\x84\x03\x02\x02\x021\x87\x03\x02\x02\x02' +
    '3\x8C\x03\x02\x02\x025\x91\x03\x02\x02\x027\x97\x03\x02\x02\x029\x9B\x03' +
    '\x02\x02\x02;\xA5\x03\x02\x02\x02=\xB9\x03\x02\x02\x02?\xBB\x03\x02\x02' +
    '\x02A\xBE\x03\x02\x02\x02C\xC3\x03\x02\x02\x02E\xC8\x03\x02\x02\x02G\xCA' +
    '\x03\x02\x02\x02I\xCD\x03\x02\x02\x02KL\x07*\x02\x02L\x04\x03\x02\x02' +
    '\x02MN\x07+\x02\x02N\x06\x03\x02\x02\x02OP\x07,\x02\x02PQ\x07,\x02\x02' +
    'Q\b\x03\x02\x02\x02RS\x07,\x02\x02S\n\x03\x02\x02\x02TU\x071\x02\x02U' +
    '\f\x03\x02\x02\x02VW\x07-\x02\x02W\x0E\x03\x02\x02\x02XY\x07/\x02\x02' +
    'Y\x10\x03\x02\x02\x02Z[\x07o\x02\x02[\\\x07q\x02\x02\\]\x07f\x02\x02]' +
    '\x12\x03\x02\x02\x02^_\x07-\x02\x02_`\x070\x02\x02`\x14\x03\x02\x02\x02' +
    'ab\x07/\x02\x02bc\x070\x02\x02c\x16\x03\x02\x02\x02de\x07,\x02\x02ef\x07' +
    '0\x02\x02f\x18\x03\x02\x02\x02gh\x071\x02\x02hi\x070\x02\x02i\x1A\x03' +
    '\x02\x02\x02jk\x07>\x02\x02k\x1C\x03\x02\x02\x02lm\x07>\x02\x02mn\x07' +
    '?\x02\x02n\x1E\x03\x02\x02\x02op\x07@\x02\x02p \x03\x02\x02\x02qr\x07' +
    '@\x02\x02rs\x07?\x02\x02s"\x03\x02\x02\x02tu\x07?\x02\x02u$\x03\x02\x02' +
    '\x02vw\x07>\x02\x02wx\x07@\x02\x02x&\x03\x02\x02\x02yz\x07?\x02\x02z{' +
    '\x07?\x02\x02{(\x03\x02\x02\x02|}\x07#\x02\x02}~\x07?\x02\x02~*\x03\x02' +
    '\x02\x02\x7F\x80\x07`\x02\x02\x80,\x03\x02\x02\x02\x81\x82\x07(\x02\x02' +
    '\x82\x83\x07(\x02\x02\x83.\x03\x02\x02\x02\x84\x85\x07~\x02\x02\x85\x86' +
    '\x07~\x02\x02\x860\x03\x02\x02\x02\x87\x88\x07p\x02\x02\x88\x89\x07q\x02' +
    '\x02\x89\x8A\x07v\x02\x02\x8A2\x03\x02\x02\x02\x8B\x8D\t\x02\x02\x02\x8C' +
    '\x8B\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x8C\x03\x02\x02\x02\x8E' +
    '\x8F\x03\x02\x02\x02\x8F4\x03\x02\x02\x02\x90\x92\t\x03\x02\x02\x91\x90' +
    '\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x91\x03\x02\x02\x02\x93\x94' +
    '\x03\x02\x02\x02\x94\x95\x03\x02\x02\x02\x95\x96\b\x1B\x02\x02\x966\x03' +
    '\x02\x02\x02\x97\x98\x07)\x02\x02\x98\x99\n\x04\x02\x02\x99\x9A\x07)\x02' +
    '\x02\x9A8\x03\x02\x02\x02\x9B\x9F\x07$\x02\x02\x9C\x9E\n\x05\x02\x02\x9D' +
    '\x9C\x03\x02\x02\x02\x9E\xA1\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F' +
    '\xA0\x03\x02\x02\x02\xA0\xA2\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2' +
    '\xA3\x07$\x02\x02\xA3:\x03\x02\x02\x02\xA4\xA6\x042;\x02\xA5\xA4\x03\x02' +
    '\x02\x02\xA6\xA7\x03\x02\x02\x02\xA7\xA5\x03\x02\x02\x02\xA7\xA8\x03\x02' +
    '\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xAD\x070\x02\x02\xAA\xAC\x042;\x02' +
    '\xAB\xAA\x03\x02\x02\x02\xAC\xAF\x03\x02\x02\x02\xAD\xAB\x03\x02\x02\x02' +
    '\xAD\xAE\x03\x02\x02\x02\xAE<\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02' +
    '\xB0\xB1\x07v\x02\x02\xB1\xB2\x07t\x02\x02\xB2\xB3\x07w\x02\x02\xB3\xBA' +
    '\x07g\x02\x02\xB4\xB5\x07h\x02\x02\xB5\xB6\x07c\x02\x02\xB6\xB7\x07n\x02' +
    '\x02\xB7\xB8\x07u\x02\x02\xB8\xBA\x07g\x02\x02\xB9\xB0\x03\x02\x02\x02' +
    '\xB9\xB4\x03\x02\x02\x02\xBA>\x03\x02\x02\x02\xBB\xBC\x07k\x02\x02\xBC' +
    '\xBD\x07h\x02\x02\xBD@\x03\x02\x02\x02\xBE\xBF\x07v\x02\x02\xBF\xC0\x07' +
    'j\x02\x02\xC0\xC1\x07g\x02\x02\xC1\xC2\x07p\x02\x02\xC2B\x03\x02\x02\x02' +
    '\xC3\xC4\x07g\x02\x02\xC4\xC5\x07n\x02\x02\xC5\xC6\x07u\x02\x02\xC6\xC7' +
    '\x07g\x02\x02\xC7D\x03\x02\x02\x02\xC8\xC9\x07=\x02\x02\xC9F\x03\x02\x02' +
    '\x02\xCA\xCB\x07=\x02\x02\xCB\xCC\x07=\x02\x02\xCCH\x03\x02\x02\x02\xCD' +
    '\xD1\t\x06\x02\x02\xCE\xD0\t\x07\x02\x02\xCF\xCE\x03\x02\x02\x02\xD0\xD3' +
    '\x03\x02\x02\x02\xD1\xCF\x03\x02\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2J' +
    '\x03\x02\x02\x02\xD3\xD1\x03\x02\x02\x02\n\x02\x8E\x93\x9F\xA7\xAD\xB9' +
    '\xD1\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!GrammarLexer.__ATN) {
      GrammarLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(GrammarLexer._serializedATN),
      );
    }

    return GrammarLexer.__ATN;
  }
}
