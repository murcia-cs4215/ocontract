// Generated from ./src/lang/Grammar.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import * as Utils from 'antlr4ts/misc/Utils';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

export class GrammarLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly POW = 3;
  public static readonly MUL = 4;
  public static readonly DIV = 5;
  public static readonly ADD = 6;
  public static readonly SUB = 7;
  public static readonly MOD = 8;
  public static readonly ADDFLOAT = 9;
  public static readonly SUBFLOAT = 10;
  public static readonly MULFLOAT = 11;
  public static readonly DIVFLOAT = 12;
  public static readonly LESSTHAN = 13;
  public static readonly LESSTHANOREQUAL = 14;
  public static readonly GREATERTHAN = 15;
  public static readonly GREATERTHANOREQUAL = 16;
  public static readonly EQUALSTRUC = 17;
  public static readonly NOTEQUALSTRUC = 18;
  public static readonly EQUALPHYS = 19;
  public static readonly NOTEQUALPHYS = 20;
  public static readonly CONCAT = 21;
  public static readonly AND = 22;
  public static readonly OR = 23;
  public static readonly NOT = 24;
  public static readonly NUMBER = 25;
  public static readonly TOSKIP = 26;
  public static readonly CHAR = 27;
  public static readonly STRING = 28;
  public static readonly FLOAT = 29;
  public static readonly BOOLEAN = 30;
  public static readonly IF = 31;
  public static readonly THEN = 32;
  public static readonly ELSE = 33;
  public static readonly LET = 34;
  public static readonly IN = 35;
  public static readonly REC = 36;
  public static readonly CON = 37;
  public static readonly FATARROW = 38;
  public static readonly PIPE = 39;
  public static readonly HASH = 40;
  public static readonly DOUBLESEMICOLON = 41;
  public static readonly COLON = 42;
  public static readonly TYPE = 43;
  public static readonly IDENTIFIER = 44;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = [
    'DEFAULT_TOKEN_CHANNEL',
    'HIDDEN',
  ];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'POW',
    'MUL',
    'DIV',
    'ADD',
    'SUB',
    'MOD',
    'ADDFLOAT',
    'SUBFLOAT',
    'MULFLOAT',
    'DIVFLOAT',
    'LESSTHAN',
    'LESSTHANOREQUAL',
    'GREATERTHAN',
    'GREATERTHANOREQUAL',
    'EQUALSTRUC',
    'NOTEQUALSTRUC',
    'EQUALPHYS',
    'NOTEQUALPHYS',
    'CONCAT',
    'AND',
    'OR',
    'NOT',
    'NUMBER',
    'TOSKIP',
    'CHAR',
    'STRING',
    'FLOAT',
    'BOOLEAN',
    'IF',
    'THEN',
    'ELSE',
    'LET',
    'IN',
    'REC',
    'CON',
    'FATARROW',
    'PIPE',
    'HASH',
    'DOUBLESEMICOLON',
    'COLON',
    'TYPE',
    'IDENTIFIER',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'('",
    "')'",
    "'**'",
    "'*'",
    "'/'",
    "'+'",
    "'-'",
    "'mod'",
    "'+.'",
    "'-.'",
    "'*.'",
    "'/.'",
    "'<'",
    "'<='",
    "'>'",
    "'>='",
    "'='",
    "'<>'",
    "'=='",
    "'!='",
    "'^'",
    "'&&'",
    "'||'",
    "'not'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'if'",
    "'then'",
    "'else'",
    "'let'",
    "'in'",
    "'rec'",
    "'contract'",
    "'=>'",
    "'|'",
    "'#'",
    "';;'",
    "':'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    'POW',
    'MUL',
    'DIV',
    'ADD',
    'SUB',
    'MOD',
    'ADDFLOAT',
    'SUBFLOAT',
    'MULFLOAT',
    'DIVFLOAT',
    'LESSTHAN',
    'LESSTHANOREQUAL',
    'GREATERTHAN',
    'GREATERTHANOREQUAL',
    'EQUALSTRUC',
    'NOTEQUALSTRUC',
    'EQUALPHYS',
    'NOTEQUALPHYS',
    'CONCAT',
    'AND',
    'OR',
    'NOT',
    'NUMBER',
    'TOSKIP',
    'CHAR',
    'STRING',
    'FLOAT',
    'BOOLEAN',
    'IF',
    'THEN',
    'ELSE',
    'LET',
    'IN',
    'REC',
    'CON',
    'FATARROW',
    'PIPE',
    'HASH',
    'DOUBLESEMICOLON',
    'COLON',
    'TYPE',
    'IDENTIFIER',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    GrammarLexer._LITERAL_NAMES,
    GrammarLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return GrammarLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(GrammarLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'Grammar.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return GrammarLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return GrammarLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return GrammarLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return GrammarLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02.\u011B\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04" +
    '+\t+\x04,\t,\x04-\t-\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03' +
    '\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t' +
    '\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03' +
    '\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03' +
    '\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03' +
    '\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03' +
    '\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03' +
    '\x1A\x06\x1A\x9D\n\x1A\r\x1A\x0E\x1A\x9E\x03\x1B\x06\x1B\xA2\n\x1B\r\x1B' +
    '\x0E\x1B\xA3\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03' +
    '\x1D\x07\x1D\xAE\n\x1D\f\x1D\x0E\x1D\xB1\v\x1D\x03\x1D\x03\x1D\x03\x1E' +
    '\x06\x1E\xB6\n\x1E\r\x1E\x0E\x1E\xB7\x03\x1E\x03\x1E\x07\x1E\xBC\n\x1E' +
    '\f\x1E\x0E\x1E\xBF\v\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F' +
    '\x03\x1F\x03\x1F\x03\x1F\x05\x1F\xCA\n\x1F\x03 \x03 \x03 \x03!\x03!\x03' +
    '!\x03!\x03!\x03"\x03"\x03"\x03"\x03"\x03#\x03#\x03#\x03#\x03$\x03' +
    '$\x03$\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03' +
    "&\x03'\x03'\x03'\x03(\x03(\x03)\x03)\x03*\x03*\x03*\x03+\x03+\x03," +
    '\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03' +
    ',\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u0113\n' +
    ',\x03-\x03-\x07-\u0117\n-\f-\x0E-\u011A\v-\x02\x02\x02.\x03\x02\x03\x05' +
    '\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13' +
    '\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02' +
    "\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/" +
    '\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?' +
    '\x02!A\x02"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02' +
    ',W\x02-Y\x02.\x03\x02\b\x03\x022;\x05\x02\v\f\x0F\x0F""\x04\x02++__' +
    '\x05\x02\f\f\x0F\x0F$$\x04\x02aac|\x06\x022;C\\aac|\x02\u0126\x02\x03' +
    '\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t' +
    '\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03' +
    '\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03' +
    '\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03' +
    '\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03' +
    "\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02" +
    '\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02' +
    '/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02' +
    '\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02' +
    '\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03' +
    '\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02' +
    '\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02' +
    'Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02' +
    '\x02\x02\x02Y\x03\x02\x02\x02\x03[\x03\x02\x02\x02\x05]\x03\x02\x02\x02' +
    '\x07_\x03\x02\x02\x02\tb\x03\x02\x02\x02\vd\x03\x02\x02\x02\rf\x03\x02' +
    '\x02\x02\x0Fh\x03\x02\x02\x02\x11j\x03\x02\x02\x02\x13n\x03\x02\x02\x02' +
    '\x15q\x03\x02\x02\x02\x17t\x03\x02\x02\x02\x19w\x03\x02\x02\x02\x1Bz\x03' +
    '\x02\x02\x02\x1D|\x03\x02\x02\x02\x1F\x7F\x03\x02\x02\x02!\x81\x03\x02' +
    "\x02\x02#\x84\x03\x02\x02\x02%\x86\x03\x02\x02\x02'\x89\x03\x02\x02\x02" +
    ')\x8C\x03\x02\x02\x02+\x8F\x03\x02\x02\x02-\x91\x03\x02\x02\x02/\x94\x03' +
    '\x02\x02\x021\x97\x03\x02\x02\x023\x9C\x03\x02\x02\x025\xA1\x03\x02\x02' +
    '\x027\xA7\x03\x02\x02\x029\xAB\x03\x02\x02\x02;\xB5\x03\x02\x02\x02=\xC9' +
    '\x03\x02\x02\x02?\xCB\x03\x02\x02\x02A\xCE\x03\x02\x02\x02C\xD3\x03\x02' +
    '\x02\x02E\xD8\x03\x02\x02\x02G\xDC\x03\x02\x02\x02I\xDF\x03\x02\x02\x02' +
    'K\xE3\x03\x02\x02\x02M\xEC\x03\x02\x02\x02O\xEF\x03\x02\x02\x02Q\xF1\x03' +
    '\x02\x02\x02S\xF3\x03\x02\x02\x02U\xF6\x03\x02\x02\x02W\u0112\x03\x02' +
    '\x02\x02Y\u0114\x03\x02\x02\x02[\\\x07*\x02\x02\\\x04\x03\x02\x02\x02' +
    ']^\x07+\x02\x02^\x06\x03\x02\x02\x02_`\x07,\x02\x02`a\x07,\x02\x02a\b' +
    '\x03\x02\x02\x02bc\x07,\x02\x02c\n\x03\x02\x02\x02de\x071\x02\x02e\f\x03' +
    '\x02\x02\x02fg\x07-\x02\x02g\x0E\x03\x02\x02\x02hi\x07/\x02\x02i\x10\x03' +
    '\x02\x02\x02jk\x07o\x02\x02kl\x07q\x02\x02lm\x07f\x02\x02m\x12\x03\x02' +
    '\x02\x02no\x07-\x02\x02op\x070\x02\x02p\x14\x03\x02\x02\x02qr\x07/\x02' +
    '\x02rs\x070\x02\x02s\x16\x03\x02\x02\x02tu\x07,\x02\x02uv\x070\x02\x02' +
    'v\x18\x03\x02\x02\x02wx\x071\x02\x02xy\x070\x02\x02y\x1A\x03\x02\x02\x02' +
    'z{\x07>\x02\x02{\x1C\x03\x02\x02\x02|}\x07>\x02\x02}~\x07?\x02\x02~\x1E' +
    '\x03\x02\x02\x02\x7F\x80\x07@\x02\x02\x80 \x03\x02\x02\x02\x81\x82\x07' +
    '@\x02\x02\x82\x83\x07?\x02\x02\x83"\x03\x02\x02\x02\x84\x85\x07?\x02' +
    '\x02\x85$\x03\x02\x02\x02\x86\x87\x07>\x02\x02\x87\x88\x07@\x02\x02\x88' +
    '&\x03\x02\x02\x02\x89\x8A\x07?\x02\x02\x8A\x8B\x07?\x02\x02\x8B(\x03\x02' +
    '\x02\x02\x8C\x8D\x07#\x02\x02\x8D\x8E\x07?\x02\x02\x8E*\x03\x02\x02\x02' +
    '\x8F\x90\x07`\x02\x02\x90,\x03\x02\x02\x02\x91\x92\x07(\x02\x02\x92\x93' +
    '\x07(\x02\x02\x93.\x03\x02\x02\x02\x94\x95\x07~\x02\x02\x95\x96\x07~\x02' +
    '\x02\x960\x03\x02\x02\x02\x97\x98\x07p\x02\x02\x98\x99\x07q\x02\x02\x99' +
    '\x9A\x07v\x02\x02\x9A2\x03\x02\x02\x02\x9B\x9D\t\x02\x02\x02\x9C\x9B\x03' +
    '\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E\x9C\x03\x02\x02\x02\x9E\x9F\x03' +
    '\x02\x02\x02\x9F4\x03\x02\x02\x02\xA0\xA2\t\x03\x02\x02\xA1\xA0\x03\x02' +
    '\x02\x02\xA2\xA3\x03\x02\x02\x02\xA3\xA1\x03\x02\x02\x02\xA3\xA4\x03\x02' +
    '\x02\x02\xA4\xA5\x03\x02\x02\x02\xA5\xA6\b\x1B\x02\x02\xA66\x03\x02\x02' +
    '\x02\xA7\xA8\x07)\x02\x02\xA8\xA9\n\x04\x02\x02\xA9\xAA\x07)\x02\x02\xAA' +
    '8\x03\x02\x02\x02\xAB\xAF\x07$\x02\x02\xAC\xAE\n\x05\x02\x02\xAD\xAC\x03' +
    '\x02\x02\x02\xAE\xB1\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02\xAF\xB0\x03' +
    '\x02\x02\x02\xB0\xB2\x03\x02\x02\x02\xB1\xAF\x03\x02\x02\x02\xB2\xB3\x07' +
    '$\x02\x02\xB3:\x03\x02\x02\x02\xB4\xB6\x042;\x02\xB5\xB4\x03\x02\x02\x02' +
    '\xB6\xB7\x03\x02\x02\x02\xB7\xB5\x03\x02\x02\x02\xB7\xB8\x03\x02\x02\x02' +
    '\xB8\xB9\x03\x02\x02\x02\xB9\xBD\x070\x02\x02\xBA\xBC\x042;\x02\xBB\xBA' +
    '\x03\x02\x02\x02\xBC\xBF\x03\x02\x02\x02\xBD\xBB\x03\x02\x02\x02\xBD\xBE' +
    '\x03\x02\x02\x02\xBE<\x03\x02\x02\x02\xBF\xBD\x03\x02\x02\x02\xC0\xC1' +
    '\x07v\x02\x02\xC1\xC2\x07t\x02\x02\xC2\xC3\x07w\x02\x02\xC3\xCA\x07g\x02' +
    '\x02\xC4\xC5\x07h\x02\x02\xC5\xC6\x07c\x02\x02\xC6\xC7\x07n\x02\x02\xC7' +
    '\xC8\x07u\x02\x02\xC8\xCA\x07g\x02\x02\xC9\xC0\x03\x02\x02\x02\xC9\xC4' +
    '\x03\x02\x02\x02\xCA>\x03\x02\x02\x02\xCB\xCC\x07k\x02\x02\xCC\xCD\x07' +
    'h\x02\x02\xCD@\x03\x02\x02\x02\xCE\xCF\x07v\x02\x02\xCF\xD0\x07j\x02\x02' +
    '\xD0\xD1\x07g\x02\x02\xD1\xD2\x07p\x02\x02\xD2B\x03\x02\x02\x02\xD3\xD4' +
    '\x07g\x02\x02\xD4\xD5\x07n\x02\x02\xD5\xD6\x07u\x02\x02\xD6\xD7\x07g\x02' +
    '\x02\xD7D\x03\x02\x02\x02\xD8\xD9\x07n\x02\x02\xD9\xDA\x07g\x02\x02\xDA' +
    '\xDB\x07v\x02\x02\xDBF\x03\x02\x02\x02\xDC\xDD\x07k\x02\x02\xDD\xDE\x07' +
    'p\x02\x02\xDEH\x03\x02\x02\x02\xDF\xE0\x07t\x02\x02\xE0\xE1\x07g\x02\x02' +
    '\xE1\xE2\x07e\x02\x02\xE2J\x03\x02\x02\x02\xE3\xE4\x07e\x02\x02\xE4\xE5' +
    '\x07q\x02\x02\xE5\xE6\x07p\x02\x02\xE6\xE7\x07v\x02\x02\xE7\xE8\x07t\x02' +
    '\x02\xE8\xE9\x07c\x02\x02\xE9\xEA\x07e\x02\x02\xEA\xEB\x07v\x02\x02\xEB' +
    'L\x03\x02\x02\x02\xEC\xED\x07?\x02\x02\xED\xEE\x07@\x02\x02\xEEN\x03\x02' +
    '\x02\x02\xEF\xF0\x07~\x02\x02\xF0P\x03\x02\x02\x02\xF1\xF2\x07%\x02\x02' +
    '\xF2R\x03\x02\x02\x02\xF3\xF4\x07=\x02\x02\xF4\xF5\x07=\x02\x02\xF5T\x03' +
    '\x02\x02\x02\xF6\xF7\x07<\x02\x02\xF7V\x03\x02\x02\x02\xF8\xF9\x07k\x02' +
    '\x02\xF9\xFA\x07p\x02\x02\xFA\u0113\x07v\x02\x02\xFB\xFC\x07h\x02\x02' +
    '\xFC\xFD\x07n\x02\x02\xFD\xFE\x07q\x02\x02\xFE\xFF\x07c\x02\x02\xFF\u0113' +
    '\x07v\x02\x02\u0100\u0101\x07e\x02\x02\u0101\u0102\x07j\x02\x02\u0102' +
    '\u0103\x07c\x02\x02\u0103\u0113\x07t\x02\x02\u0104\u0105\x07u\x02\x02' +
    '\u0105\u0106\x07v\x02\x02\u0106\u0107\x07t\x02\x02\u0107\u0108\x07k\x02' +
    '\x02\u0108\u0109\x07p\x02\x02\u0109\u0113\x07i\x02\x02\u010A\u010B\x07' +
    'd\x02\x02\u010B\u010C\x07q\x02\x02\u010C\u010D\x07q\x02\x02\u010D\u0113' +
    '\x07n\x02\x02\u010E\u010F\x07w\x02\x02\u010F\u0110\x07p\x02\x02\u0110' +
    '\u0111\x07k\x02\x02\u0111\u0113\x07v\x02\x02\u0112\xF8\x03\x02\x02\x02' +
    '\u0112\xFB\x03\x02\x02\x02\u0112\u0100\x03\x02\x02\x02\u0112\u0104\x03' +
    '\x02\x02\x02\u0112\u010A\x03\x02\x02\x02\u0112\u010E\x03\x02\x02\x02\u0113' +
    'X\x03\x02\x02\x02\u0114\u0118\t\x06\x02\x02\u0115\u0117\t\x07\x02\x02' +
    '\u0116\u0115\x03\x02\x02\x02\u0117\u011A\x03\x02\x02\x02\u0118\u0116\x03' +
    '\x02\x02\x02\u0118\u0119\x03\x02\x02\x02\u0119Z\x03\x02\x02\x02\u011A' +
    '\u0118\x03\x02\x02\x02\v\x02\x9E\xA3\xAF\xB7\xBD\xC9\u0112\u0118\x03\b' +
    '\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!GrammarLexer.__ATN) {
      GrammarLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(GrammarLexer._serializedATN),
      );
    }

    return GrammarLexer.__ATN;
  }
}
