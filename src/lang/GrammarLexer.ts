// Generated from ./src/lang/Grammar.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class GrammarLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly POW = 3;
	public static readonly MUL = 4;
	public static readonly DIV = 5;
	public static readonly ADD = 6;
	public static readonly SUB = 7;
	public static readonly MOD = 8;
	public static readonly ADDFLOAT = 9;
	public static readonly SUBFLOAT = 10;
	public static readonly MULFLOAT = 11;
	public static readonly DIVFLOAT = 12;
	public static readonly LESSTHAN = 13;
	public static readonly LESSTHANOREQUAL = 14;
	public static readonly GREATERTHAN = 15;
	public static readonly GREATERTHANOREQUAL = 16;
	public static readonly EQUALSTRUC = 17;
	public static readonly NOTEQUALSTRUC = 18;
	public static readonly EQUALPHYS = 19;
	public static readonly NOTEQUALPHYS = 20;
	public static readonly CONCAT = 21;
	public static readonly AND = 22;
	public static readonly OR = 23;
	public static readonly NOT = 24;
	public static readonly NUMBER = 25;
	public static readonly TOSKIP = 26;
	public static readonly CHAR = 27;
	public static readonly STRING = 28;
	public static readonly FLOAT = 29;
	public static readonly BOOLEAN = 30;
	public static readonly IF = 31;
	public static readonly THEN = 32;
	public static readonly ELSE = 33;
	public static readonly DOUBLESEMICOLON = 34;
	public static readonly IDENTIFIER = 35;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "POW", "MUL", "DIV", "ADD", "SUB", "MOD", "ADDFLOAT", 
		"SUBFLOAT", "MULFLOAT", "DIVFLOAT", "LESSTHAN", "LESSTHANOREQUAL", "GREATERTHAN", 
		"GREATERTHANOREQUAL", "EQUALSTRUC", "NOTEQUALSTRUC", "EQUALPHYS", "NOTEQUALPHYS", 
		"CONCAT", "AND", "OR", "NOT", "NUMBER", "TOSKIP", "CHAR", "STRING", "FLOAT", 
		"BOOLEAN", "IF", "THEN", "ELSE", "DOUBLESEMICOLON", "IDENTIFIER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'**'", "'*'", "'/'", "'+'", "'-'", "'mod'", 
		"'+.'", "'-.'", "'*.'", "'/.'", "'<'", "'<='", "'>'", "'>='", "'='", "'<>'", 
		"'=='", "'!='", "'^'", "'&&'", "'||'", "'not'", undefined, undefined, 
		undefined, undefined, undefined, undefined, "'if'", "'then'", "'else'", 
		"';;'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "POW", "MUL", "DIV", "ADD", "SUB", "MOD", 
		"ADDFLOAT", "SUBFLOAT", "MULFLOAT", "DIVFLOAT", "LESSTHAN", "LESSTHANOREQUAL", 
		"GREATERTHAN", "GREATERTHANOREQUAL", "EQUALSTRUC", "NOTEQUALSTRUC", "EQUALPHYS", 
		"NOTEQUALPHYS", "CONCAT", "AND", "OR", "NOT", "NUMBER", "TOSKIP", "CHAR", 
		"STRING", "FLOAT", "BOOLEAN", "IF", "THEN", "ELSE", "DOUBLESEMICOLON", 
		"IDENTIFIER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(GrammarLexer._LITERAL_NAMES, GrammarLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return GrammarLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(GrammarLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Grammar.g4"; }

	// @Override
	public get ruleNames(): string[] { return GrammarLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return GrammarLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return GrammarLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return GrammarLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02%\xD0\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03" +
		"\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14" +
		"\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x06\x1A" +
		"\x8B\n\x1A\r\x1A\x0E\x1A\x8C\x03\x1B\x06\x1B\x90\n\x1B\r\x1B\x0E\x1B\x91" +
		"\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x07\x1D" +
		"\x9C\n\x1D\f\x1D\x0E\x1D\x9F\v\x1D\x03\x1D\x03\x1D\x03\x1E\x06\x1E\xA4" +
		"\n\x1E\r\x1E\x0E\x1E\xA5\x03\x1E\x03\x1E\x07\x1E\xAA\n\x1E\f\x1E\x0E\x1E" +
		"\xAD\v\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x05\x1F\xB8\n\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03" +
		"!\x03\"\x03\"\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$\x07$\xCC\n$\f" +
		"$\x0E$\xCF\v$\x02\x02\x02%\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
		"\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
		"\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%\x03" +
		"\x02\b\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x04\x02++__\x05\x02\f\f\x0F\x0F" +
		"$$\x04\x02aac|\x06\x022;C\\aac|\x02\xD6\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02" +
		"\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03" +
		"\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02" +
		"\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02" +
		"?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02" +
		"\x02\x02\x02G\x03\x02\x02\x02\x03I\x03\x02\x02\x02\x05K\x03\x02\x02\x02" +
		"\x07M\x03\x02\x02\x02\tP\x03\x02\x02\x02\vR\x03\x02\x02\x02\rT\x03\x02" +
		"\x02\x02\x0FV\x03\x02\x02\x02\x11X\x03\x02\x02\x02\x13\\\x03\x02\x02\x02" +
		"\x15_\x03\x02\x02\x02\x17b\x03\x02\x02\x02\x19e\x03\x02\x02\x02\x1Bh\x03" +
		"\x02\x02\x02\x1Dj\x03\x02\x02\x02\x1Fm\x03\x02\x02\x02!o\x03\x02\x02\x02" +
		"#r\x03\x02\x02\x02%t\x03\x02\x02\x02\'w\x03\x02\x02\x02)z\x03\x02\x02" +
		"\x02+}\x03\x02\x02\x02-\x7F\x03\x02\x02\x02/\x82\x03\x02\x02\x021\x85" +
		"\x03\x02\x02\x023\x8A\x03\x02\x02\x025\x8F\x03\x02\x02\x027\x95\x03\x02" +
		"\x02\x029\x99\x03\x02\x02\x02;\xA3\x03\x02\x02\x02=\xB7\x03\x02\x02\x02" +
		"?\xB9\x03\x02\x02\x02A\xBC\x03\x02\x02\x02C\xC1\x03\x02\x02\x02E\xC6\x03" +
		"\x02\x02\x02G\xC9\x03\x02\x02\x02IJ\x07*\x02\x02J\x04\x03\x02\x02\x02" +
		"KL\x07+\x02\x02L\x06\x03\x02\x02\x02MN\x07,\x02\x02NO\x07,\x02\x02O\b" +
		"\x03\x02\x02\x02PQ\x07,\x02\x02Q\n\x03\x02\x02\x02RS\x071\x02\x02S\f\x03" +
		"\x02\x02\x02TU\x07-\x02\x02U\x0E\x03\x02\x02\x02VW\x07/\x02\x02W\x10\x03" +
		"\x02\x02\x02XY\x07o\x02\x02YZ\x07q\x02\x02Z[\x07f\x02\x02[\x12\x03\x02" +
		"\x02\x02\\]\x07-\x02\x02]^\x070\x02\x02^\x14\x03\x02\x02\x02_`\x07/\x02" +
		"\x02`a\x070\x02\x02a\x16\x03\x02\x02\x02bc\x07,\x02\x02cd\x070\x02\x02" +
		"d\x18\x03\x02\x02\x02ef\x071\x02\x02fg\x070\x02\x02g\x1A\x03\x02\x02\x02" +
		"hi\x07>\x02\x02i\x1C\x03\x02\x02\x02jk\x07>\x02\x02kl\x07?\x02\x02l\x1E" +
		"\x03\x02\x02\x02mn\x07@\x02\x02n \x03\x02\x02\x02op\x07@\x02\x02pq\x07" +
		"?\x02\x02q\"\x03\x02\x02\x02rs\x07?\x02\x02s$\x03\x02\x02\x02tu\x07>\x02" +
		"\x02uv\x07@\x02\x02v&\x03\x02\x02\x02wx\x07?\x02\x02xy\x07?\x02\x02y(" +
		"\x03\x02\x02\x02z{\x07#\x02\x02{|\x07?\x02\x02|*\x03\x02\x02\x02}~\x07" +
		"`\x02\x02~,\x03\x02\x02\x02\x7F\x80\x07(\x02\x02\x80\x81\x07(\x02\x02" +
		"\x81.\x03\x02\x02\x02\x82\x83\x07~\x02\x02\x83\x84\x07~\x02\x02\x840\x03" +
		"\x02\x02\x02\x85\x86\x07p\x02\x02\x86\x87\x07q\x02\x02\x87\x88\x07v\x02" +
		"\x02\x882\x03\x02\x02\x02\x89\x8B\t\x02\x02\x02\x8A\x89\x03\x02\x02\x02" +
		"\x8B\x8C\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02" +
		"\x8D4\x03\x02\x02\x02\x8E\x90\t\x03\x02\x02\x8F\x8E\x03\x02\x02\x02\x90" +
		"\x91\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92" +
		"\x93\x03\x02\x02\x02\x93\x94\b\x1B\x02\x02\x946\x03\x02\x02\x02\x95\x96" +
		"\x07)\x02\x02\x96\x97\n\x04\x02\x02\x97\x98\x07)\x02\x02\x988\x03\x02" +
		"\x02\x02\x99\x9D\x07$\x02\x02\x9A\x9C\n\x05\x02\x02\x9B\x9A\x03\x02\x02" +
		"\x02\x9C\x9F\x03\x02\x02\x02\x9D\x9B\x03\x02\x02\x02\x9D\x9E\x03\x02\x02" +
		"\x02\x9E\xA0\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\xA0\xA1\x07$\x02" +
		"\x02\xA1:\x03\x02\x02\x02\xA2\xA4\x042;\x02\xA3\xA2\x03\x02\x02\x02\xA4" +
		"\xA5\x03\x02\x02\x02\xA5\xA3\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6" +
		"\xA7\x03\x02\x02\x02\xA7\xAB\x070\x02\x02\xA8\xAA\x042;\x02\xA9\xA8\x03" +
		"\x02\x02\x02\xAA\xAD\x03\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAB\xAC\x03" +
		"\x02\x02\x02\xAC<\x03\x02\x02\x02\xAD\xAB\x03\x02\x02\x02\xAE\xAF\x07" +
		"v\x02\x02\xAF\xB0\x07t\x02\x02\xB0\xB1\x07w\x02\x02\xB1\xB8\x07g\x02\x02" +
		"\xB2\xB3\x07h\x02\x02\xB3\xB4\x07c\x02\x02\xB4\xB5\x07n\x02\x02\xB5\xB6" +
		"\x07u\x02\x02\xB6\xB8\x07g\x02\x02\xB7\xAE\x03\x02\x02\x02\xB7\xB2\x03" +
		"\x02\x02\x02\xB8>\x03\x02\x02\x02\xB9\xBA\x07k\x02\x02\xBA\xBB\x07h\x02" +
		"\x02\xBB@\x03\x02\x02\x02\xBC\xBD\x07v\x02\x02\xBD\xBE\x07j\x02\x02\xBE" +
		"\xBF\x07g\x02\x02\xBF\xC0\x07p\x02\x02\xC0B\x03\x02\x02\x02\xC1\xC2\x07" +
		"g\x02\x02\xC2\xC3\x07n\x02\x02\xC3\xC4\x07u\x02\x02\xC4\xC5\x07g\x02\x02" +
		"\xC5D\x03\x02\x02\x02\xC6\xC7\x07=\x02\x02\xC7\xC8\x07=\x02\x02\xC8F\x03" +
		"\x02\x02\x02\xC9\xCD\t\x06\x02\x02\xCA\xCC\t\x07\x02\x02\xCB\xCA\x03\x02" +
		"\x02\x02\xCC\xCF\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCD\xCE\x03\x02" +
		"\x02\x02\xCEH\x03\x02\x02\x02\xCF\xCD\x03\x02\x02\x02\n\x02\x8C\x91\x9D" +
		"\xA5\xAB\xB7\xCD\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GrammarLexer.__ATN) {
			GrammarLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(GrammarLexer._serializedATN));
		}

		return GrammarLexer.__ATN;
	}

}

