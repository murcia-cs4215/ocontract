// Generated from ./src/lang/Grammar.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import * as Utils from 'antlr4ts/misc/Utils';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

export class GrammarLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly POW = 3;
  public static readonly MUL = 4;
  public static readonly DIV = 5;
  public static readonly ADD = 6;
  public static readonly SUB = 7;
  public static readonly MOD = 8;
  public static readonly ADDFLOAT = 9;
  public static readonly SUBFLOAT = 10;
  public static readonly MULFLOAT = 11;
  public static readonly DIVFLOAT = 12;
  public static readonly LESSTHAN = 13;
  public static readonly LESSTHANOREQUAL = 14;
  public static readonly GREATERTHAN = 15;
  public static readonly GREATERTHANOREQUAL = 16;
  public static readonly EQUALSTRUC = 17;
  public static readonly NOTEQUALSTRUC = 18;
  public static readonly EQUALPHYS = 19;
  public static readonly NOTEQUALPHYS = 20;
  public static readonly CONCAT = 21;
  public static readonly AND = 22;
  public static readonly OR = 23;
  public static readonly NOT = 24;
  public static readonly NUMBER = 25;
  public static readonly TOSKIP = 26;
  public static readonly CHAR = 27;
  public static readonly STRING = 28;
  public static readonly FLOAT = 29;
  public static readonly BOOLEAN = 30;
  public static readonly IF = 31;
  public static readonly THEN = 32;
  public static readonly ELSE = 33;
  public static readonly LET = 34;
  public static readonly IN = 35;
  public static readonly REC = 36;
  public static readonly DOUBLESEMICOLON = 37;
  public static readonly TYPE = 38;
  public static readonly IDENTIFIER = 39;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = [
    'DEFAULT_TOKEN_CHANNEL',
    'HIDDEN',
  ];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'POW',
    'MUL',
    'DIV',
    'ADD',
    'SUB',
    'MOD',
    'ADDFLOAT',
    'SUBFLOAT',
    'MULFLOAT',
    'DIVFLOAT',
    'LESSTHAN',
    'LESSTHANOREQUAL',
    'GREATERTHAN',
    'GREATERTHANOREQUAL',
    'EQUALSTRUC',
    'NOTEQUALSTRUC',
    'EQUALPHYS',
    'NOTEQUALPHYS',
    'CONCAT',
    'AND',
    'OR',
    'NOT',
    'NUMBER',
    'TOSKIP',
    'CHAR',
    'STRING',
    'FLOAT',
    'BOOLEAN',
    'IF',
    'THEN',
    'ELSE',
    'LET',
    'IN',
    'REC',
    'DOUBLESEMICOLON',
    'TYPE',
    'IDENTIFIER',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'('",
    "')'",
    "'**'",
    "'*'",
    "'/'",
    "'+'",
    "'-'",
    "'mod'",
    "'+.'",
    "'-.'",
    "'*.'",
    "'/.'",
    "'<'",
    "'<='",
    "'>'",
    "'>='",
    "'='",
    "'<>'",
    "'=='",
    "'!='",
    "'^'",
    "'&&'",
    "'||'",
    "'not'",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "'if'",
    "'then'",
    "'else'",
    "'let'",
    "'in'",
    "'rec'",
    "';;'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    'POW',
    'MUL',
    'DIV',
    'ADD',
    'SUB',
    'MOD',
    'ADDFLOAT',
    'SUBFLOAT',
    'MULFLOAT',
    'DIVFLOAT',
    'LESSTHAN',
    'LESSTHANOREQUAL',
    'GREATERTHAN',
    'GREATERTHANOREQUAL',
    'EQUALSTRUC',
    'NOTEQUALSTRUC',
    'EQUALPHYS',
    'NOTEQUALPHYS',
    'CONCAT',
    'AND',
    'OR',
    'NOT',
    'NUMBER',
    'TOSKIP',
    'CHAR',
    'STRING',
    'FLOAT',
    'BOOLEAN',
    'IF',
    'THEN',
    'ELSE',
    'LET',
    'IN',
    'REC',
    'DOUBLESEMICOLON',
    'TYPE',
    'IDENTIFIER',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    GrammarLexer._LITERAL_NAMES,
    GrammarLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return GrammarLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(GrammarLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'Grammar.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return GrammarLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return GrammarLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return GrammarLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return GrammarLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02)\u0102\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x03\x02\x03\x02\x03" +
    '\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03' +
    '\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03' +
    '\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03' +
    '\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03' +
    '\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03' +
    '\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03' +
    '\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x06\x1A\x93\n\x1A\r\x1A\x0E\x1A\x94' +
    '\x03\x1B\x06\x1B\x98\n\x1B\r\x1B\x0E\x1B\x99\x03\x1B\x03\x1B\x03\x1C\x03' +
    '\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x07\x1D\xA4\n\x1D\f\x1D\x0E\x1D\xA7' +
    '\v\x1D\x03\x1D\x03\x1D\x03\x1E\x06\x1E\xAC\n\x1E\r\x1E\x0E\x1E\xAD\x03' +
    '\x1E\x03\x1E\x07\x1E\xB2\n\x1E\f\x1E\x0E\x1E\xB5\v\x1E\x03\x1F\x03\x1F' +
    '\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\xC0\n' +
    '\x1F\x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03"\x03"\x03"\x03"\x03' +
    '"\x03#\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03%\x03%\x03&\x03&\x03' +
    "&\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03" +
    "'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x03" +
    "'\x03'\x03'\x03'\x03'\x03'\x05'\xFA\n'\x03(\x03(\x07(\xFE\n(\f" +
    '(\x0E(\u0101\v(\x02\x02\x02)\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02' +
    '\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02' +
    '\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%' +
    "\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B" +
    '5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02"C\x02#E\x02$G\x02' +
    '%I\x02&K\x02\'M\x02(O\x02)\x03\x02\b\x03\x022;\x05\x02\v\f\x0F\x0F""' +
    '\x04\x02++__\x05\x02\f\f\x0F\x0F$$\x04\x02aac|\x06\x022;C\\aac|\x02\u010D' +
    '\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02' +
    '\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02' +
    '\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02' +
    '\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02' +
    '\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02' +
    "!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03" +
    '\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02' +
    '\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02' +
    '5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02' +
    '\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02' +
    '\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03' +
    '\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02' +
    '\x02\x03Q\x03\x02\x02\x02\x05S\x03\x02\x02\x02\x07U\x03\x02\x02\x02\t' +
    'X\x03\x02\x02\x02\vZ\x03\x02\x02\x02\r\\\x03\x02\x02\x02\x0F^\x03\x02' +
    '\x02\x02\x11`\x03\x02\x02\x02\x13d\x03\x02\x02\x02\x15g\x03\x02\x02\x02' +
    '\x17j\x03\x02\x02\x02\x19m\x03\x02\x02\x02\x1Bp\x03\x02\x02\x02\x1Dr\x03' +
    '\x02\x02\x02\x1Fu\x03\x02\x02\x02!w\x03\x02\x02\x02#z\x03\x02\x02\x02' +
    "%|\x03\x02\x02\x02'\x7F\x03\x02\x02\x02)\x82\x03\x02\x02\x02+\x85\x03" +
    '\x02\x02\x02-\x87\x03\x02\x02\x02/\x8A\x03\x02\x02\x021\x8D\x03\x02\x02' +
    '\x023\x92\x03\x02\x02\x025\x97\x03\x02\x02\x027\x9D\x03\x02\x02\x029\xA1' +
    '\x03\x02\x02\x02;\xAB\x03\x02\x02\x02=\xBF\x03\x02\x02\x02?\xC1\x03\x02' +
    '\x02\x02A\xC4\x03\x02\x02\x02C\xC9\x03\x02\x02\x02E\xCE\x03\x02\x02\x02' +
    'G\xD2\x03\x02\x02\x02I\xD5\x03\x02\x02\x02K\xD9\x03\x02\x02\x02M\xF9\x03' +
    '\x02\x02\x02O\xFB\x03\x02\x02\x02QR\x07*\x02\x02R\x04\x03\x02\x02\x02' +
    'ST\x07+\x02\x02T\x06\x03\x02\x02\x02UV\x07,\x02\x02VW\x07,\x02\x02W\b' +
    '\x03\x02\x02\x02XY\x07,\x02\x02Y\n\x03\x02\x02\x02Z[\x071\x02\x02[\f\x03' +
    '\x02\x02\x02\\]\x07-\x02\x02]\x0E\x03\x02\x02\x02^_\x07/\x02\x02_\x10' +
    '\x03\x02\x02\x02`a\x07o\x02\x02ab\x07q\x02\x02bc\x07f\x02\x02c\x12\x03' +
    '\x02\x02\x02de\x07-\x02\x02ef\x070\x02\x02f\x14\x03\x02\x02\x02gh\x07' +
    '/\x02\x02hi\x070\x02\x02i\x16\x03\x02\x02\x02jk\x07,\x02\x02kl\x070\x02' +
    '\x02l\x18\x03\x02\x02\x02mn\x071\x02\x02no\x070\x02\x02o\x1A\x03\x02\x02' +
    '\x02pq\x07>\x02\x02q\x1C\x03\x02\x02\x02rs\x07>\x02\x02st\x07?\x02\x02' +
    't\x1E\x03\x02\x02\x02uv\x07@\x02\x02v \x03\x02\x02\x02wx\x07@\x02\x02' +
    'xy\x07?\x02\x02y"\x03\x02\x02\x02z{\x07?\x02\x02{$\x03\x02\x02\x02|}' +
    '\x07>\x02\x02}~\x07@\x02\x02~&\x03\x02\x02\x02\x7F\x80\x07?\x02\x02\x80' +
    '\x81\x07?\x02\x02\x81(\x03\x02\x02\x02\x82\x83\x07#\x02\x02\x83\x84\x07' +
    '?\x02\x02\x84*\x03\x02\x02\x02\x85\x86\x07`\x02\x02\x86,\x03\x02\x02\x02' +
    '\x87\x88\x07(\x02\x02\x88\x89\x07(\x02\x02\x89.\x03\x02\x02\x02\x8A\x8B' +
    '\x07~\x02\x02\x8B\x8C\x07~\x02\x02\x8C0\x03\x02\x02\x02\x8D\x8E\x07p\x02' +
    '\x02\x8E\x8F\x07q\x02\x02\x8F\x90\x07v\x02\x02\x902\x03\x02\x02\x02\x91' +
    '\x93\t\x02\x02\x02\x92\x91\x03\x02\x02\x02\x93\x94\x03\x02\x02\x02\x94' +
    '\x92\x03\x02\x02\x02\x94\x95\x03\x02\x02\x02\x954\x03\x02\x02\x02\x96' +
    '\x98\t\x03\x02\x02\x97\x96\x03\x02\x02\x02\x98\x99\x03\x02\x02\x02\x99' +
    '\x97\x03\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B' +
    '\x9C\b\x1B\x02\x02\x9C6\x03\x02\x02\x02\x9D\x9E\x07)\x02\x02\x9E\x9F\n' +
    '\x04\x02\x02\x9F\xA0\x07)\x02\x02\xA08\x03\x02\x02\x02\xA1\xA5\x07$\x02' +
    '\x02\xA2\xA4\n\x05\x02\x02\xA3\xA2\x03\x02\x02\x02\xA4\xA7\x03\x02\x02' +
    '\x02\xA5\xA3\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA8\x03\x02\x02' +
    '\x02\xA7\xA5\x03\x02\x02\x02\xA8\xA9\x07$\x02\x02\xA9:\x03\x02\x02\x02' +
    '\xAA\xAC\x042;\x02\xAB\xAA\x03\x02\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD' +
    '\xAB\x03\x02\x02\x02\xAD\xAE\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF' +
    '\xB3\x070\x02\x02\xB0\xB2\x042;\x02\xB1\xB0\x03\x02\x02\x02\xB2\xB5\x03' +
    '\x02\x02\x02\xB3\xB1\x03\x02\x02\x02\xB3\xB4\x03\x02\x02\x02\xB4<\x03' +
    '\x02\x02\x02\xB5\xB3\x03\x02\x02\x02\xB6\xB7\x07v\x02\x02\xB7\xB8\x07' +
    't\x02\x02\xB8\xB9\x07w\x02\x02\xB9\xC0\x07g\x02\x02\xBA\xBB\x07h\x02\x02' +
    '\xBB\xBC\x07c\x02\x02\xBC\xBD\x07n\x02\x02\xBD\xBE\x07u\x02\x02\xBE\xC0' +
    '\x07g\x02\x02\xBF\xB6\x03\x02\x02\x02\xBF\xBA\x03\x02\x02\x02\xC0>\x03' +
    '\x02\x02\x02\xC1\xC2\x07k\x02\x02\xC2\xC3\x07h\x02\x02\xC3@\x03\x02\x02' +
    '\x02\xC4\xC5\x07v\x02\x02\xC5\xC6\x07j\x02\x02\xC6\xC7\x07g\x02\x02\xC7' +
    '\xC8\x07p\x02\x02\xC8B\x03\x02\x02\x02\xC9\xCA\x07g\x02\x02\xCA\xCB\x07' +
    'n\x02\x02\xCB\xCC\x07u\x02\x02\xCC\xCD\x07g\x02\x02\xCDD\x03\x02\x02\x02' +
    '\xCE\xCF\x07n\x02\x02\xCF\xD0\x07g\x02\x02\xD0\xD1\x07v\x02\x02\xD1F\x03' +
    '\x02\x02\x02\xD2\xD3\x07k\x02\x02\xD3\xD4\x07p\x02\x02\xD4H\x03\x02\x02' +
    '\x02\xD5\xD6\x07t\x02\x02\xD6\xD7\x07g\x02\x02\xD7\xD8\x07e\x02\x02\xD8' +
    'J\x03\x02\x02\x02\xD9\xDA\x07=\x02\x02\xDA\xDB\x07=\x02\x02\xDBL\x03\x02' +
    '\x02\x02\xDC\xDD\x07p\x02\x02\xDD\xDE\x07w\x02\x02\xDE\xDF\x07o\x02\x02' +
    '\xDF\xE0\x07d\x02\x02\xE0\xE1\x07g\x02\x02\xE1\xFA\x07t\x02\x02\xE2\xE3' +
    '\x07h\x02\x02\xE3\xE4\x07n\x02\x02\xE4\xE5\x07q\x02\x02\xE5\xE6\x07c\x02' +
    '\x02\xE6\xFA\x07v\x02\x02\xE7\xE8\x07e\x02\x02\xE8\xE9\x07j\x02\x02\xE9' +
    '\xEA\x07c\x02\x02\xEA\xFA\x07t\x02\x02\xEB\xEC\x07u\x02\x02\xEC\xED\x07' +
    'v\x02\x02\xED\xEE\x07t\x02\x02\xEE\xEF\x07k\x02\x02\xEF\xF0\x07p\x02\x02' +
    '\xF0\xFA\x07i\x02\x02\xF1\xF2\x07d\x02\x02\xF2\xF3\x07q\x02\x02\xF3\xF4' +
    '\x07q\x02\x02\xF4\xFA\x07n\x02\x02\xF5\xF6\x07w\x02\x02\xF6\xF7\x07p\x02' +
    '\x02\xF7\xF8\x07k\x02\x02\xF8\xFA\x07v\x02\x02\xF9\xDC\x03\x02\x02\x02' +
    '\xF9\xE2\x03\x02\x02\x02\xF9\xE7\x03\x02\x02\x02\xF9\xEB\x03\x02\x02\x02' +
    '\xF9\xF1\x03\x02\x02\x02\xF9\xF5\x03\x02\x02\x02\xFAN\x03\x02\x02\x02' +
    '\xFB\xFF\t\x06\x02\x02\xFC\xFE\t\x07\x02\x02\xFD\xFC\x03\x02\x02\x02\xFE' +
    '\u0101\x03\x02\x02\x02\xFF\xFD\x03\x02\x02\x02\xFF\u0100\x03\x02\x02\x02' +
    '\u0100P\x03\x02\x02\x02\u0101\xFF\x03\x02\x02\x02\v\x02\x94\x99\xA5\xAD' +
    '\xB3\xBF\xF9\xFF\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!GrammarLexer.__ATN) {
      GrammarLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(GrammarLexer._serializedATN),
      );
    }

    return GrammarLexer.__ATN;
  }
}
